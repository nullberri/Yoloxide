{"version":3,"sources":["pages/main/hooks.ts","store/devices/reducer.ts","shared/util.ts","store/devices/thunk.ts","shared/hooks/use-interval.ts","shared/hooks/use-devices.ts","pages/main/device-tabs.tsx","pages/main/device-toolbar.tsx","pages/main/historyEntry.tsx","pages/main/execution-history.tsx","pages/main/main.tsx","serviceWorker.ts","store/globalEnvironment/reducer.ts","store/store.tsx","pages/app/app.tsx","index.tsx","pages/main/editor.tsx"],"names":["useAnnotations","code","ref","useEffect","current","lines","split","annotations","forEach","line","index","push","column","row","text","type","length","editor","getSession","setAnnotations","useStyles","makeStyles","createStyles","highlightRow","backgroundColor","position","useMarkers","classes","session","Object","values","getMarkers","x","removeMarker","id","range","Range","addMarker","renderer","updateFrontMarkers","useCursorPosition","useCallback","moveCursorToPosition","getSelection","clearSelection","deviceAdapter","createEntityAdapter","createSlice","reducers","addDevice","addOne","removeDevice","removeOne","updateDevice","updateOne","extraReducers","initialState","getInitialState","name","reducer","actions","then","wasm_execute_line","stepDevice","undefined","Array","fill","createDevice","nanoid","errors","executing","executionHistory","tick","localEnv","nextLine","ticks","selectors","getSelectors","devices","stepDeviceForwardThunk","dispatch","getState","device","selectById","Error","lineNum","getLine","result","oneLine","lineNumber","globalEnv","nextEnv","next_line","local_context","global_context","version","error","nextLineNumber","runLine","nextDevice","slice","concat","message","changes","noop","useDevices","useDispatch","useMemo","useSelector","selectAll","useState","executionMode","setExecutionMode","deviceId","stepDeviceForward","stepDeviceBack","stepDeviceBackThunk","callback","delay","immediate","savedCallback","useRef","setInterval","clearInterval","useInterval","DeviceTabs","props","onChanged","selectedDevice","setSelectedDevice","onChangeDevice","_","value","Toolbar","Tabs","onChange","map","Tab","key","label","DeviceControls","Button","onClick","variant","color","Typography","TextField","event","target","ExecutionHistoryEntry","Table","TableHead","TableRow","TableCell","TableBody","entries","sort","a","b","localeCompare","variable","NumberVal","StringVal","ExecutionHistoryList","Paper","style","margin","marginBottom","padding","Date","toISOString","substr","FlexExpand","styled","flex","width","overflow","FlexColumn","display","flexDirection","flexWrap","height","MainPage","setCode","useDevice","onCodeChanged","Grid","container","xs","xl","item","highlightedRow","readonly","Boolean","window","location","hostname","match","globalEnvironmentAdapter","addVariable","removeVarable","setEnvironment","setAll","resetEnvironment","removeAll","globalEnvironment","middleware","getDefaultMiddleware","store","configureStore","devTools","process","deviceActions","StoreProvider","children","App","AppBar","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","Editor","setCursorPosition","mode","theme","onLoad","setImmediate","readOnly","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","showLineNumbers","tabSize","printMarginColumn","useWorker","editorProps","$blockScrolling"],"mappings":"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","file":"static/js/main.7a4612c6.chunk.js","sourcesContent":["import { useEffect, useCallback } from \"react\"\r\nimport AceEditor, { IAnnotation } from \"react-ace\"\r\nimport { Range } from \"ace-builds\"\r\nimport { makeStyles, createStyles } from \"@material-ui/core\"\r\n\r\nexport const useAnnotations = (code: string, ref: React.MutableRefObject<AceEditor | null>) => {\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            const lines = code.split(\"\\n\")\r\n            const annotations: IAnnotation[] = []\r\n\r\n            lines.forEach((line, index) => {\r\n                if (index >= 20) {\r\n                    annotations.push({\r\n                        column: 0,\r\n                        row: index,\r\n                        text: \"Error exceeding 20 lines, Line will not execute\",\r\n                        type: \"error\",\r\n                    })\r\n                }\r\n                if (line.length > 70) {\r\n                    annotations.push({\r\n                        column: 0,\r\n                        row: index,\r\n                        text: \"Warning exceeding 70 charactors\",\r\n                        type: \"warning\",\r\n                    })\r\n                }\r\n            })\r\n            const session = ref.current.editor.getSession()\r\n            session.setAnnotations(annotations)\r\n        }\r\n    }, [code, ref])\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n    createStyles({\r\n        highlightRow: {\r\n            backgroundColor: \"rgba(0,0,255,0.1)\",\r\n            position: \"absolute\",\r\n        },\r\n    })\r\n)\r\n\r\nexport const useMarkers = (line: number, ref: React.MutableRefObject<AceEditor | null>) => {\r\n    const classes = useStyles()\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            const session = ref.current.editor.getSession()\r\n            const markers = Object.values(session.getMarkers())\r\n            markers.forEach((x) => {\r\n                x.type === \"fullLine\" && session.removeMarker(x.id)\r\n            })\r\n            const range = new Range(line, 0, line, 100)\r\n            session.addMarker(range, classes.highlightRow, \"fullLine\", false)\r\n            ref.current.editor.renderer.updateFrontMarkers()\r\n        }\r\n    }, [line,classes, ref])\r\n}\r\n\r\nexport const useCursorPosition = (ref: React.MutableRefObject<AceEditor | null>)=>{\r\n    return useCallback((row: number)=>{\r\n        ref.current?.editor.moveCursorToPosition({column:0, row})\r\n        ref.current?.editor.getSession().getSelection().clearSelection()\r\n    },[ref])\r\n}","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\"\r\nimport {Device} from \"shared/models/device\"\r\n\r\nexport const deviceAdapter = createEntityAdapter<Device>()\r\n\r\nexport const { reducer, actions } = createSlice({\r\n    reducers: {\r\n        addDevice: deviceAdapter.addOne,\r\n        removeDevice: deviceAdapter.removeOne,\r\n        updateDevice: deviceAdapter.updateOne,\r\n    },\r\n    extraReducers: {},\r\n    initialState: deviceAdapter.getInitialState(),\r\n    name: \"devices\",\r\n})\r\n","import { YololDevice, YololEnvironment, YololVariable } from \"./models/yoloxide\"\r\nimport { Device } from \"./models/device\"\r\nimport { nanoid } from \"@reduxjs/toolkit\"\r\nimport(\"yoloxide\").then(({ wasm_execute_line }) => {\r\n    stepDevice = wasm_execute_line\r\n})\r\n\r\nlet stepDevice: undefined | ((env: YololDevice, code: string) => YololDevice) = undefined\r\n\r\nconst newLines = new Array<string>(20).fill(\"\\n\")\r\nexport const padCode = (code: string) => {\r\n    const lines = code.split(\"\\n\")\r\n    const paddedLines = lines\r\n        .concat(newLines)\r\n        .slice(0, 20)\r\n    console.log(\"paddedLines\", paddedLines)\r\n    const joinedLines = paddedLines.join(\"\")\r\n    console.log(joinedLines.length)\r\n    return joinedLines\r\n}\r\n\r\nexport const getLine = (code: string, lineNum: number) => {\r\n    const lines = code.split(\"\\n\")\r\n    return lines[lineNum - 1] ?? \"\"\r\n}\r\n\r\nexport const formatYololVariable = (variable: YololVariable) => {\r\n    return variable.NumberVal ? variable.NumberVal : `\"${variable.StringVal}\"`\r\n}\r\n\r\nexport interface RunLineResult {\r\n    nextLineNumber: number\r\n    localEnv: YololEnvironment\r\n    globalEnv: YololEnvironment\r\n    error: string\r\n}\r\n\r\nexport const runLine = (\r\n    oneLine: string,\r\n    lineNumber: number,\r\n    localEnv: YololEnvironment,\r\n    globalEnv: YololEnvironment\r\n): RunLineResult => {\r\n    if (!stepDevice) {\r\n        throw new Error(\"Emulator not loaded\")\r\n    }\r\n    const env: YololDevice = {\r\n        next_line: lineNumber,\r\n        local_context: localEnv,\r\n        global_context: globalEnv,\r\n        name: \"\",\r\n        version: \"0.3.2\",\r\n        error: \"\",\r\n    }\r\n\r\n    const nextEnv = stepDevice(env, oneLine)\r\n\r\n    return {\r\n        nextLineNumber: nextEnv.next_line,\r\n        localEnv: nextEnv.local_context,\r\n        globalEnv: nextEnv.global_context,\r\n        error: nextEnv.error,\r\n    }\r\n}\r\n\r\nexport const defaultExecutionHistory = ()=>[ {\r\n    tick: 0,\r\n    line: -1,\r\n    localEnv: {},\r\n    nextLine: 1,\r\n}]\r\n\r\nexport function createDevice(name?: string): Device {\r\n    return {\r\n        id: nanoid(10),\r\n        code: \"\",\r\n        name: name ?? \"new Device\",\r\n        errors: [],\r\n        executing: false,\r\n        executionHistory: defaultExecutionHistory(),\r\n        ticks: 0,\r\n    }\r\n}","import { Device } from \"shared/models/device\"\r\nimport { Store } from \"shared/models/store\"\r\nimport { AppThunk } from \"shared/models/util\"\r\nimport { getLine, runLine } from \"shared/util\"\r\nimport { actions, deviceAdapter } from \"./reducer\"\r\n\r\nconst selectors = deviceAdapter.getSelectors<Store>((x) => x.devices)\r\nexport const runAllDevices: AppThunk = (dispatch, getState) => {}\r\n\r\nexport function runDevice(id: string): AppThunk {\r\n    return (dispatch, getState) => {}\r\n}\r\n\r\nexport function stepDeviceBackThunk(id: string): AppThunk {\r\n    return (dispatch, getState) => {\r\n        const device = selectors.selectById(getState(), id)\r\n        if (!device) {\r\n            throw new Error(\"Invalid Id\")\r\n        }\r\n\r\n        if (device.executionHistory.length > 1) {\r\n            dispatch(\r\n                actions.updateDevice({\r\n                    id,\r\n                    changes: {\r\n                        executionHistory: device.executionHistory.slice(1),\r\n                    },\r\n                })\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport function stepDeviceForwardThunk(id: string): AppThunk {\r\n    return (dispatch, getState) => {\r\n        const device = selectors.selectById(getState(), id)\r\n        if (!device) {\r\n            throw new Error(\"Invalid Id\")\r\n        }\r\n        const { nextLine, localEnv } = device.executionHistory[0]\r\n        const line = getLine(device.code, nextLine)\r\n        const result = runLine(line, nextLine, localEnv, {})\r\n        const nextDevice: Partial<Device> = {\r\n            executionHistory: [\r\n                {\r\n                    tick: device.executionHistory[0].tick + 1,\r\n                    line: nextLine,\r\n                    nextLine: result.nextLineNumber,\r\n                    code: line,\r\n                    localEnv: result.localEnv,\r\n                },\r\n                ...device.executionHistory,\r\n            ].slice(0, 1000),\r\n        }\r\n\r\n        if (result.error) {\r\n            nextDevice.errors = device.errors.concat({\r\n                lineNumber: nextLine,\r\n                message: result.error,\r\n            })\r\n        }\r\n\r\n        dispatch(actions.updateDevice({ id, changes: nextDevice }))\r\n    }\r\n}\r\n","import { useRef, useEffect } from \"react\"\r\n\r\nconst noop = () => {}\r\nexport function useInterval(callback: () => void, delay?: number, immediate?: boolean) {\r\n    const savedCallback = useRef(noop)\r\n    useEffect(() => {\r\n        savedCallback.current = callback\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (immediate && delay !== undefined) {\r\n            savedCallback.current()\r\n        }\r\n    }, [immediate, delay])\r\n\r\n    useEffect(() => {\r\n        if (delay === undefined) {\r\n            return\r\n        }\r\n        const tick = () => savedCallback.current()\r\n        const id = setInterval(tick, delay)\r\n        return () => clearInterval(id)\r\n    })\r\n}\r\n","import { actions, deviceAdapter } from \"store/devices\"\r\nimport { useCallback, useMemo, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Device } from \"shared/models/device\"\r\nimport { Store } from \"shared/models/store\"\r\nimport { stepDeviceForwardThunk, stepDeviceBackThunk } from \"store/devices/thunk\"\r\nimport { ExecutionMode } from \"shared/models/util\"\r\nimport { useInterval } from \"./use-interval\"\r\nimport { createDevice } from \"shared/util\"\r\n\r\nexport function useDevice() {\r\n    const dispatch = useDispatch()\r\n \r\n    const setCode = useCallback(\r\n        (deviceId: string, code: string) => {\r\n            dispatch(\r\n                actions.updateDevice({\r\n                    id: deviceId,\r\n                    changes: { code },\r\n                })\r\n            )\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return { setCode }\r\n}\r\n\r\nexport function useDevices() {\r\n    const dispatch = useDispatch()\r\n    const selectors = useMemo(() => deviceAdapter.getSelectors<Store>((x) => x.devices), [])\r\n    const devices = useSelector(selectors.selectAll)\r\n    const [executionMode, setExecutionMode] = useState<ExecutionMode>(\"none\")\r\n\r\n    const addDevice = useCallback(() => {\r\n        dispatch(actions.addDevice(createDevice(\"New Device \" + devices.length)))\r\n    }, [dispatch, devices])\r\n\r\n    const removeDevice = useCallback(\r\n        (deviceId: string) => {\r\n            dispatch(actions.removeDevice(deviceId))\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    const updateDevice = useCallback(\r\n        (id: string, device: Partial<Device>) => {\r\n            dispatch(\r\n                actions.updateDevice({\r\n                    id: id,\r\n                    changes: device,\r\n                })\r\n            )\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    const stepDeviceForward = useCallback(\r\n        (id: string) => {\r\n            dispatch(stepDeviceForwardThunk(id))\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    const stepDeviceBack = useCallback(\r\n        (id: string) => {\r\n            dispatch(stepDeviceBackThunk(id))\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    const runAllDevices = useCallback(() => {\r\n        stepDeviceForward(devices[0].id)\r\n    }, [stepDeviceForward, devices])\r\n\r\n    const interval = executionMode === \"running\" ? 200 : undefined\r\n    useInterval(runAllDevices, interval)\r\n\r\n    return {\r\n        addDevice,\r\n        removeDevice,\r\n        updateDevice,\r\n        devices,\r\n        stepDeviceForward,\r\n        stepDeviceBack,\r\n        setExecutionMode,\r\n        executionMode,\r\n    }\r\n}\r\n","import { Tab, Tabs, Toolbar } from \"@material-ui/core\"\r\nimport React, { useCallback, useState, useEffect } from \"react\"\r\nimport { useDevices } from \"shared/hooks/use-devices\"\r\nimport { Device } from \"shared/models/device\"\r\n\r\nexport const DeviceTabs: React.FC<{\r\n    onChanged: (device: Device) => void\r\n}> = (props) => {\r\n    const { onChanged } = props\r\n    const { devices } = useDevices()\r\n    const [selectedDevice, setSelectedDevice] = useState<number>(0)\r\n\r\n    const onChangeDevice = useCallback(\r\n        (_: any, value: number) => {\r\n            setSelectedDevice(value)\r\n        },\r\n        []\r\n    )\r\n\r\n    useEffect(()=>{\r\n        onChanged(devices[selectedDevice])\r\n    },[devices, onChanged, selectedDevice])\r\n\r\n    return (\r\n        <Toolbar>\r\n            {devices.length > 0 && (\r\n                <Tabs value={selectedDevice} onChange={onChangeDevice}>\r\n                    {devices.map((device, index) => (\r\n                        <Tab key={device.name} value={index} label={device.name} />\r\n                    ))}\r\n                </Tabs>\r\n            )}\r\n        </Toolbar>\r\n    )\r\n}\r\n","import { Button, TextField, Toolbar, Typography } from \"@material-ui/core\"\r\nimport React from \"react\"\r\nimport { useDevices } from \"shared/hooks/use-devices\"\r\nimport { Device } from \"shared/models/device\"\r\nimport { defaultExecutionHistory } from \"shared/util\"\r\n\r\nexport const DeviceControls: React.FC<{ device: Device }> = (props) => {\r\n    const { device } = props\r\n    const {\r\n        removeDevice,\r\n        updateDevice,\r\n        stepDeviceForward,\r\n        stepDeviceBack,\r\n        setExecutionMode,\r\n        executionMode,\r\n    } = useDevices()\r\n\r\n    return (\r\n        <Toolbar>\r\n            <Button\r\n                onClick={() => {\r\n                    stepDeviceBack(device.id)\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\">\r\n                &lt;\r\n            </Button>\r\n            <Button\r\n                onClick={() => {\r\n                    stepDeviceForward(device.id)\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\">\r\n                &gt;\r\n            </Button>\r\n            <Button\r\n                onClick={() => {\r\n                    if (executionMode === \"none\") {\r\n                        updateDevice(device.id, { executionHistory: defaultExecutionHistory() })\r\n                        setExecutionMode(\"running\")\r\n                    } else {\r\n                        setExecutionMode(\"none\")\r\n                    }\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"secondary\">\r\n                Run Code\r\n            </Button>\r\n\r\n            <Typography>Device Name:</Typography>\r\n            <TextField\r\n                value={device.name}\r\n                onChange={(event) => {\r\n                    updateDevice(device.id, { name: event.target.value })\r\n                }}\r\n            />\r\n            <Button\r\n                onClick={() => {\r\n                    removeDevice(device.id)\r\n                }}>\r\n                Delete Device\r\n            </Button>\r\n        </Toolbar>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Table, TableHead, TableRow, TableBody, TableCell } from \"@material-ui/core\"\r\nimport { ExecutionHistory } from \"shared/models/device\"\r\nimport { formatYololVariable } from \"shared/util\"\r\n\r\nexport const ExecutionHistoryEntry: React.FC<{ executionHistory: ExecutionHistory }> = (props) => {\r\n    const { executionHistory } = props\r\n    return (\r\n        <Table>\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Value</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {Object.entries(executionHistory.localEnv)\r\n                    .sort(([a], [b]) => {\r\n                        return a.localeCompare(b)\r\n                    })\r\n                    .map(([name, value]) => {\r\n                       \r\n                        return (\r\n                            <TableRow key={name}>\r\n                                <TableCell>{name}</TableCell>\r\n                                <TableCell>{formatYololVariable(value)}</TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    })}\r\n            </TableBody>\r\n        </Table>\r\n    )\r\n}\r\n","import { Paper } from \"@material-ui/core\"\r\nimport React from \"react\"\r\nimport { ExecutionHistory } from \"shared/models/device\"\r\nimport { ExecutionHistoryEntry } from \"./historyEntry\"\r\n\r\nexport const ExecutionHistoryList: React.FC<{ executionHistory: ExecutionHistory[] }> = (props) => {\r\n    const { executionHistory } = props\r\n\r\n    const entries = executionHistory.slice(0, 20).map((x) => {\r\n        return (\r\n            <Paper style={{ margin: 5, marginBottom: 8, padding: 8 }}>\r\n                <div key={x.tick}>\r\n                    <span>Line: {x.line}</span>\r\n                    <span>Tick: {x.tick}</span>\r\n                    <span>Time: {new Date(x.tick * 200).toISOString().substr(11, 10)}</span>\r\n                    <ExecutionHistoryEntry executionHistory={x} />\r\n                </div>\r\n            </Paper>\r\n        )\r\n    })\r\n    return <>{entries}</>\r\n}\r\n","import { Grid, styled } from \"@material-ui/core\"\r\nimport React, { useState, useCallback } from \"react\"\r\nimport { Device } from \"shared/models/device\"\r\nimport { DeviceTabs } from \"./device-tabs\"\r\nimport { DeviceControls } from \"./device-toolbar\"\r\nimport { Editor } from \"./editor\"\r\nimport { ExecutionHistoryList } from \"./execution-history\"\r\nimport { useDevice } from \"shared/hooks/use-devices\"\r\n\r\nconst FlexExpand = styled(\"div\")({\r\n    flex: \"1 1 auto\",\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n})\r\n\r\nconst FlexColumn = styled(\"div\")({\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    flexWrap: \"nowrap\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n})\r\n\r\nexport const MainPage: React.FC = (props) => {\r\n    const [selectedDevice, setSelectedDevice] = useState<Device>()\r\n    const {setCode} = useDevice()\r\n\r\n    const onCodeChanged = useCallback((code:string)=>{\r\n        if(selectedDevice?.id){\r\n            setCode(selectedDevice.id, code)\r\n        }\r\n    },[selectedDevice, setCode])\r\n\r\n    return (\r\n        <FlexColumn>\r\n            <DeviceTabs onChanged={setSelectedDevice} />\r\n            {selectedDevice && <DeviceControls device={selectedDevice} />}\r\n            {selectedDevice && (\r\n                <FlexExpand>\r\n                    <Grid container style={{ height: \"100%\" }}>\r\n                        <Grid xs={12} xl={4} item style={{ padding: 8 }}>\r\n                            <Editor code={selectedDevice.code} highlightedRow={selectedDevice.executionHistory[0].line} onCodeChanged={onCodeChanged} readonly={false}/>\r\n                        </Grid>\r\n                        <Grid xs={12} xl={2} item style={{ height: \"100%\", overflow: \"auto\" }}>\r\n                            <ExecutionHistoryList executionHistory={selectedDevice.executionHistory} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </FlexExpand>\r\n            )}\r\n        </FlexColumn>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import { createSlice, createEntityAdapter } from \"@reduxjs/toolkit\"\r\nimport { YololVariable } from \"shared/models/yoloxide\"\r\n\r\nexport const globalEnvironmentAdapter = createEntityAdapter<YololVariable>()\r\n\r\nexport const { reducer, actions } = createSlice({\r\n    reducers: {\r\n        addVariable: globalEnvironmentAdapter.addOne,\r\n        removeVarable: globalEnvironmentAdapter.removeOne,\r\n        setEnvironment: globalEnvironmentAdapter.setAll,\r\n        resetEnvironment: globalEnvironmentAdapter.removeAll,\r\n    },\r\n    extraReducers: {},\r\n    initialState: globalEnvironmentAdapter.getInitialState(),\r\n    name: \"globalEnvironment\",\r\n})\r\n","import { getDefaultMiddleware, configureStore } from \"@reduxjs/toolkit\"\r\nimport { Provider } from \"react-redux\"\r\nimport { Store } from \"../shared/models/store\"\r\nimport { reducer as globalEnvironment } from \"./globalEnvironment\"\r\nimport { reducer as devices, actions as deviceActions } from \"./devices\"\r\nimport logger from \"redux-logger\"\r\nimport React from \"react\"\r\nimport { createDevice } from \"shared/util\"\r\n\r\nconst reducer = { globalEnvironment, devices }\r\n\r\nconst middleware = [...getDefaultMiddleware()]as any\r\n\r\nexport const store = configureStore<Store>({\r\n    reducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV !== \"production\",\r\n})\r\n\r\nstore.dispatch(deviceActions.addDevice(createDevice()))\r\n\r\nexport const StoreProvider: React.FC = (props) => {\r\n    const { children } = props\r\n    return <Provider store={store}>{children}</Provider>\r\n}\r\n","import { AppBar, Button, styled, Toolbar, Typography } from \"@material-ui/core\"\r\nimport React from \"react\"\r\nimport { useDevices } from \"shared/hooks/use-devices\"\r\n\r\nconst FlexExpand = styled(\"div\")({\r\n    flex: \"1 1 auto\",\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n})\r\n\r\nconst FlexColumn = styled(\"div\")({\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    flexWrap: \"nowrap\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n})\r\n\r\nexport const App: React.FC = (props) => {\r\n    const {children} = props\r\n    const {\r\n        addDevice,\r\n    } = useDevices()\r\n   \r\n\r\n    return (\r\n        <FlexColumn>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography>Yolol Emulator</Typography>\r\n                    <Button onClick={addDevice} color=\"inherit\">\r\n                        Add Device\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <FlexExpand>{children}</FlexExpand>\r\n        </FlexColumn>\r\n    )\r\n}\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport { MainPage } from \"pages/main\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"ace-builds/webpack-resolver\"\nimport \"ace-builds/src-noconflict/mode-javascript\"\nimport \"ace-builds/src-noconflict/theme-github\"\nimport { StoreProvider } from \"./store/store\"\nimport { App } from \"pages/app/app\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <StoreProvider>\n            <App>\n                <MainPage />\n            </App>\n        </StoreProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import {} from \"@react-hook/debounce\"\r\nimport React, { useRef } from \"react\"\r\nimport AceEditor from \"react-ace\"\r\nimport AutoSizer from \"react-virtualized-auto-sizer\"\r\nimport { useAnnotations, useCursorPosition, useMarkers } from \"./hooks\"\r\n\r\nexport const Editor: React.FC<{\r\n    code: string\r\n    onCodeChanged: (code: string) => void\r\n    highlightedRow: number\r\n    readonly: boolean\r\n}> = (props) => {\r\n    const { code, onCodeChanged, highlightedRow, readonly } = props\r\n    const ref = useRef<AceEditor>(null)\r\n\r\n    useAnnotations(code, ref)\r\n    useMarkers(highlightedRow, ref)\r\n\r\n    const setCursorPosition = useCursorPosition(ref)\r\n\r\n    return (\r\n        <AutoSizer>\r\n            {({ width }) => {\r\n                return (\r\n                    <AceEditor\r\n                        ref={ref}\r\n                        width={width + \"px\"}\r\n                        mode=\"javascript\"\r\n                        theme=\"github\"\r\n                        onLoad={() => setImmediate(() => setCursorPosition(0))}\r\n                        name=\"code-editor\"\r\n                        value={code}\r\n                        onChange={onCodeChanged}\r\n                        readOnly={readonly}\r\n                        fontSize={14}\r\n                        showPrintMargin={true}\r\n                        showGutter={true}\r\n                        highlightActiveLine={true}\r\n                        setOptions={{\r\n                            showLineNumbers: true,\r\n                            tabSize: 2,\r\n                            printMarginColumn: 70,\r\n                            useWorker: false,\r\n                        }}\r\n                        editorProps={{\r\n                            $blockScrolling: true,\r\n                        }}\r\n                    />\r\n                )\r\n            }}\r\n        </AutoSizer>\r\n    )\r\n}\r\n"],"sourceRoot":""}